#!/usr/bin/env ruby
require 'fileutils'

COMMANDS = %w[console logs status].freeze

# Check if first argument is a command (default to production) or environment flag
if COMMANDS.include?(ARGV[0])
  # First argument is a command, default to production environment
  env = '-p'
  command = ARGV[0]
  optional_args = ARGV[1..]&.join(' ')
else
  # First argument is environment flag
  env = ARGV[0]
  command = ARGV[1]
  optional_args = ARGV[2..]&.join(' ')
end

unless COMMANDS.include?(command)
  puts "Usage: digital [-s|-p] #{COMMANDS.join('|')} [--optional-args]"
  puts 'Environment defaults to production (-p) if not specified'
  exit 1
end

require 'dotenv'
Dotenv.load('.env.digital')

# Define constants for environment variable keys
ENVIRONMENTS = {
  '-p' => {
    app_id: 'PRODUCTION_APP_ID',
    web_name: 'PRODUCTION_WEB_NAME',
    label: 'PRODUCTION'
  },
  '-s' => {
    app_id: 'STAGING_APP_ID',
    web_name: 'STAGING_WEB_NAME',
    label: 'STAGING'
  }
}.freeze

env_details = ENVIRONMENTS[env]

# Extract environment variables
app_id = ENV[env_details[:app_id]]
web_name = ENV[env_details[:web_name]]

# Ensure necessary environment variables are set
unless app_id && web_name
  puts "Missing environment variables for #{env_details[:label]}."
  puts "Please define #{env_details[:app_id]} and #{env_details[:web_name]} in .env.digital"
  exit 1
end

# Display environment label
puts '======================='
puts "=======#{env_details[:label]}======="
puts '======================='

# Command mode logic based on additional flags
case command
when 'logs'
  command = ['doctl', 'apps', 'logs', app_id, web_name, optional_args].join(' ')
when 'status'
  command = [
    'doctl', 'apps', 'list-deployments', app_id, web_name,
    '--format', 'Created,Updated,Cause,Phase', '|', 'head', '-5'
  ].join(' ')
when 'console'
  command = ['doctl', 'apps', 'console', app_id, web_name].join(' ')
end

# Execute the constructed command
system(command)
